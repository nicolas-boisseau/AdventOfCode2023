import os.path
import heapq
from collections import defaultdict

from common.common import download_input_if_not_exists, post_answer, capture, capture_all, read_input_lines

download_input_if_not_exists(2023)

def extract(lines):
    cubes = []
    for id, line in enumerate(lines):
        cube_positions = line.split("~")
        cube_pos_1 = cube_positions[0].split(",")
        cube_pos_2 = cube_positions[1].split(",")
        start = (int(cube_pos_1[0]), int(cube_pos_1[1]), int(cube_pos_1[2]))
        end = (int(cube_pos_2[0]), int(cube_pos_2[1]), int(cube_pos_2[2]))
        cube = (start, end, id)
        # for z in range(start[2], end[2]+1):
        #     for y in range(start[1], end[1]+1):
        #         for x in range(start[0], end[0]+1):
        #             cube[(x, y, z)] = True

        cubes.append(cube)
    return cubes

names = defaultdict(str)
names.update({
    0: "A",
    1: "B",
    2: "C",
    3: "D",
    4: "E",
    5: "F",
    6: "G"
})

def intersect_another_cube(cube, other_cube):
    (x1, y1, z1), (x2, y2, z2), _ = cube
    (x3, y3, z3), (x4, y4, z4), _ = other_cube

    for z in range(z1, z2+1):
        for y in range(y1, y2+1):
            for x in range(x1, x2+1):
                if x3 <= x <= x4 and y3 <= y <= y4 and z3 <= z <= z4:
                    return True

    return False

def print_from_y_perspective(cubes):
    maxX = max([max(max(cube[0][0], cube[1][0]) for cube in cubes)])
    maxZ = max([max(max(cube[0][2], cube[1][2]) for cube in cubes)])

    for z in range(maxZ, -1, -1):
        for x in range(maxX+1):
            cube_here = []
            for i, cube in enumerate(cubes):
                if cube[0][0] <= x <= cube[1][0] and cube[0][2] <= z <= cube[1][2]:
                    cube_here.append(names[cube[2]])
            if len(cube_here) == 0:
                print(".", end="")
            else:
                print(cube_here[0] if len(cube_here)==1 else "?", end="")
        print()
    print()

def print_from_x_perspective(cubes):
    maxY = max([max(max(cube[0][1], cube[1][1]) for cube in cubes)])
    maxZ = max([max(max(cube[0][2], cube[1][2]) for cube in cubes)])

    for z in range(maxZ, -1, -1):
        for y in range(maxY+1):
            cube_here = []
            for i, cube in enumerate(cubes):
                if cube[0][1] <= y <= cube[1][1] and cube[0][2] <= z <= cube[1][2]:
                    cube_here.append(names[cube[2]])
            if len(cube_here) == 0:
                print(".", end="")
            else:
                print(cube_here[0] if len(cube_here) == 1 else "?", end="")
        print()
    print()

def fall(cubes, debug=False):
    has_change = False
    for current_cube in cubes:

        # current_cube = nexts.pop()
        if debug:
            print(f"current_cube = {names[current_cube[2]]}")

        # check if cube can fall
        if current_cube[0][2] <= 1 or current_cube[1][2] <= 1:
            # cube already on the ground
            continue

        # check if cube can fall
        can_fall = True
        while can_fall:
            if current_cube[0][2] <= 1 or current_cube[1][2] <= 1:
                # cube already on the ground
                break

            current_cube_p1 = current_cube[0]
            current_cube_p2 = current_cube[1]
            current_cube_p1 = (current_cube_p1[0], current_cube_p1[1], current_cube_p1[2] - 1)
            current_cube_p2 = (current_cube_p2[0], current_cube_p2[1], current_cube_p2[2] - 1)
            new_current_cube = (current_cube_p1, current_cube_p2, current_cube[2])

            (x1, y1, z1), (x2, y2, z2), id = new_current_cube
            for other_cube in [c for c in cubes if c[2] != id and z1 <= c[0][2] <= z2 and z1 <= c[1][2] <= z2]:
                if intersect_another_cube(new_current_cube, other_cube):
                    can_fall = False
                    break
            if can_fall:
                if debug:
                    print(f"Cube {names[current_cube[2]]} falling -1 !")
                has_change = True
                current_cube = new_current_cube

        # replace cube in cubes
        cubes = [cube if cube[2] != current_cube[2] else current_cube for cube in cubes]

        if debug:
            print(f"After try moving {names[current_cube[2]]} : has changed ? {has_change}")
            print_from_y_perspective(cubes)
            print_from_x_perspective(cubes)

    return cubes, has_change


def is_in_same_range(removed_cube, c):
    (x1, y1, z1), (x2, y2, z2), id = removed_cube
    (x3, y3, z3), (x4, y4, z4), id2 = c

    return (x3 <= x1 <= x4 or x3 <= x2 <= x4) or (y3 <= y1 <= y4 or y3 <= y2 <= y4)


def part1(lines, debug=False):
    cubes = extract(lines)
    #print_from_y_perspective(cubes)
    #print_from_x_perspective(cubes)

    # lets let cubes fall on Z axis
    has_change = True
    while has_change:
        cubes, has_change = fall(cubes, debug=debug)

    print("First fall complete !")
    #print_from_y_perspective(cubes)
    #print_from_x_perspective(cubes)

    # Let's find removable cubes
    removable_cubes_ids = []
    for removing_c in cubes:
        print(f"Removing {names[removing_c[2]]}...")
        (x1, y1, z1), (x2, y2, z2), id = removing_c

        to_test = (x1, y1, z1+1), (x2, y2, z2+1), id
        cubes_upper = [cube for cube in cubes if cube[2] != removing_c[2] and intersect_another_cube(cube, to_test)]
        if not any(cubes_upper):
            if removing_c[2] not in removable_cubes_ids:
                removable_cubes_ids.append(removing_c[2])
        else:
            ok = False
            for cube_upper in cubes_upper:
                cube_upper_falling_1 = ((cube_upper[0][0], cube_upper[0][1], cube_upper[0][2]-1), (cube_upper[1][0], cube_upper[1][1], cube_upper[1][2]-1), cube_upper[2])
                cube_upper_falling_touched = [cube for cube in cubes if cube[2] != removing_c[2] and cube[2] != cube_upper[2] and intersect_another_cube(cube, cube_upper_falling_1)]
                if any(cube_upper_falling_touched):
                    ok = True
                    break
            if ok:
                if removing_c[2] not in removable_cubes_ids:
                    removable_cubes_ids.append(removing_c[2])

        # cubes_without_c = [cube for cube in cubes if cube[2] != removing_c[2]]
        # cubes_without_c, has_change = fall(cubes_without_c, debug=debug)
        # if not has_change:
        #     removable_cubes_ids.append(removing_c[2])
        #     #print(names[removing_c[2]])

    print(f"removable_cubes_ids = {[names[id] for id in removable_cubes_ids]}")

    return len(removable_cubes_ids)



def part2(lines):
    return 4


if __name__ == '__main__':

    part = 1
    expectedSampleResult = -1

    part_func = part1 if part == 1 else part2
    if part_func(read_input_lines("sample.txt")) == expectedSampleResult:
        print(f"Sample for part {part} OK")

        result = part_func(read_input_lines("input.txt"))
        print(f"Input result for part {part} is {result}")

        post_answer(2023, part, result)
        print(f"Part {part} result posted !")
